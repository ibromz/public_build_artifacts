{
  "stats": {
    "suites": 4,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-29T01:05:59.835Z",
    "end": "2021-11-29T01:05:59.835Z",
    "duration": 29116,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dfd8f0e1-fede-4031-ae60-ae29e5a3ee09",
      "title": "",
      "fullFile": "cypress/integration/actions_short.spec.js",
      "file": "cypress/integration/actions_short.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aa28904a-04ed-49f9-92d5-85dcd93f455a",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 4433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "484a0826-3a7f-4d81-9991-2ee6ad2ec405",
              "parentUUID": "aa28904a-04ed-49f9-92d5-85dcd93f455a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "326db236-4163-4b21-88f4-47b786699e37",
              "parentUUID": "aa28904a-04ed-49f9-92d5-85dcd93f455a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 657,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "f2ba2671-9f1d-4eec-b940-ece109b88069",
              "parentUUID": "aa28904a-04ed-49f9-92d5-85dcd93f455a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 634,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "eccdeba7-203e-43c1-978a-cb6e4c8a31c1",
              "parentUUID": "aa28904a-04ed-49f9-92d5-85dcd93f455a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "567fe16c-d44e-4856-bb4c-450e4a16bf86",
              "parentUUID": "aa28904a-04ed-49f9-92d5-85dcd93f455a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "484a0826-3a7f-4d81-9991-2ee6ad2ec405",
            "326db236-4163-4b21-88f4-47b786699e37",
            "f2ba2671-9f1d-4eec-b940-ece109b88069",
            "eccdeba7-203e-43c1-978a-cb6e4c8a31c1",
            "567fe16c-d44e-4856-bb4c-450e4a16bf86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6857,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "dbd38f4d-7102-43d9-b599-7d7babb92723",
      "title": "",
      "fullFile": "cypress/integration/actions.spec.js",
      "file": "cypress/integration/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 4252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "638a1b03-b88b-4db9-aac2-417413ff5928",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "99ecbd67-46c4-423a-a8be-ce38dee71e0e",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "8e619ec3-8ca7-4b8c-8805-45603f838e56",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 670,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "5deb6d88-3639-480a-b975-c2451e735cc9",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 653,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "8423a425-b4d1-4573-8b93-425e516c1620",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "f3f1decb-9d7a-4749-9563-ad840836899d",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "7a3fef5b-2d98-444b-b418-45c395855899",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "d3704bad-658f-4394-ba90-67b2c7acd18c",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "393b692a-6c0d-4002-bb7d-da7252547a38",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "7e65c3ff-093c-419f-b8c5-95a3e251dbae",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1056,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "0b8bf978-9690-40f1-9632-a0173e6720df",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "127bcbf1-67e2-4e1d-a26a-e4b3458547b2",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "ab8a0e25-b02a-4900-83dd-8e5bca3488e2",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollTo\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "3863cba0-ff04-4ad5-8c11-6943ecba6390",
              "parentUUID": "4bd97453-ad2c-48f5-977d-72e7c3f07184",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "638a1b03-b88b-4db9-aac2-417413ff5928",
            "99ecbd67-46c4-423a-a8be-ce38dee71e0e",
            "8e619ec3-8ca7-4b8c-8805-45603f838e56",
            "5deb6d88-3639-480a-b975-c2451e735cc9",
            "8423a425-b4d1-4573-8b93-425e516c1620",
            "f3f1decb-9d7a-4749-9563-ad840836899d",
            "7a3fef5b-2d98-444b-b418-45c395855899",
            "d3704bad-658f-4394-ba90-67b2c7acd18c",
            "393b692a-6c0d-4002-bb7d-da7252547a38",
            "7e65c3ff-093c-419f-b8c5-95a3e251dbae",
            "0b8bf978-9690-40f1-9632-a0173e6720df",
            "127bcbf1-67e2-4e1d-a26a-e4b3458547b2",
            "ab8a0e25-b02a-4900-83dd-8e5bca3488e2",
            "3863cba0-ff04-4ad5-8c11-6943ecba6390"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15671,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9aa5e5c5-5015-4cae-adcc-3f2aa48f2dfd",
      "title": "",
      "fullFile": "cypress/integration/assertions.spec.js",
      "file": "cypress/integration/assertions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1bec4087-c927-4bdd-bc50-144b01f1c94d",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "94b9e794-a5d9-4450-b7fb-e3abfad917a7",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 539,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first() // checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content') // chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td') // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last') // finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible'); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "5a52c8ce-6b98-4430-90e2-a8ba7b148c70",
                  "parentUUID": "94b9e794-a5d9-4450-b7fb-e3abfad917a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "7e3e592e-ca75-4f64-a584-f338b75473be",
                  "parentUUID": "94b9e794-a5d9-4450-b7fb-e3abfad917a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a52c8ce-6b98-4430-90e2-a8ba7b148c70",
                "7e3e592e-ca75-4f64-a584-f338b75473be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 746,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f63e857-76ef-49a4-975c-3f659d840bc2",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 244,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be[\"true\"];\nvar o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n}); // matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "aa8f67c8-2cbb-4e13-94c4-6253deb81069",
                  "parentUUID": "2f63e857-76ef-49a4-975c-3f659d840bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should(function ($p) {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  // @ts-ignore TS6133 unused variable\n  var texts = $p.map(function (i, el) {\n    return Cypress.$(el).text();\n  }); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  var paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "7c83940a-038b-4ead-929f-804130ac09de",
                  "parentUUID": "2f63e857-76ef-49a4-975c-3f659d840bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 283,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div') // .should(cb) callback function will be retried\n.should(function ($div) {\n  expect($div).to.have.length(1);\n  var className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then(function ($div) {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "97d515ca-7268-4940-a412-9f7cfff7acc6",
                  "parentUUID": "2f63e857-76ef-49a4-975c-3f659d840bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 200,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should(function ($div) {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  var className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(\"Could not find class \\\"heading-\\\" in \".concat(className));\n  }\n});",
                  "err": {},
                  "uuid": "d9f6943b-1ada-4a46-8c60-638a68ffcaf8",
                  "parentUUID": "2f63e857-76ef-49a4-975c-3f659d840bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 244,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nvar text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nvar normalizeText = function normalizeText(s) {\n  return s.replace(/\\s/g, '').toLowerCase();\n};\ncy.get('.two-elements').find('.first').then(function ($first) {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should(function ($div) {\n  // we can massage text before comparing\n  var secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "9e03bb06-826f-4ad1-bfd4-eec09a253c9d",
                  "parentUUID": "2f63e857-76ef-49a4-975c-3f659d840bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 197,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "839ee522-849c-40c2-a9ca-80891c6d1959",
                  "parentUUID": "2f63e857-76ef-49a4-975c-3f659d840bc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa8f67c8-2cbb-4e13-94c4-6253deb81069",
                "7c83940a-038b-4ead-929f-804130ac09de",
                "97d515ca-7268-4940-a412-9f7cfff7acc6",
                "d9f6943b-1ada-4a46-8c60-638a68ffcaf8",
                "9e03bb06-826f-4ad1-bfd4-eec09a253c9d",
                "839ee522-849c-40c2-a9ca-80891c6d1959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1434,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1e500fa7-eacd-4e60-a3ef-c0f6b3ca5f29",
      "title": "",
      "fullFile": "cypress/integration/misc.spec.js",
      "file": "cypress/integration/misc.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0c1647dd-bdfc-43e5-9fa3-714a6b12d12d",
          "title": "Misc",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".end() - end the command chain",
              "fullTitle": "Misc .end() - end the command chain",
              "timedOut": null,
              "duration": 723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/end\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy.get('.misc-table').within(function () {\n  // ends the current chain and yields null\n  cy.contains('Cheryl').click().end(); // queries the entire table again\n  cy.contains('Charles').click();\n});",
              "err": {},
              "uuid": "eba1bdb8-5f03-45ec-b8b5-3e983775b092",
              "parentUUID": "0c1647dd-bdfc-43e5-9fa3-714a6b12d12d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 1116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(\"Platform \".concat(Cypress.platform, \" architecture \").concat(Cypress.arch)); // on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nvar isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec('print cypress.json').its('stderr').should('be.empty');\n} else {\n  cy.exec('cat cypress.json').its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "2f7acca2-53d7-4bfd-a34c-d2f30e2d1ff3",
              "parentUUID": "0c1647dd-bdfc-43e5-9fa3-714a6b12d12d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "8a619b0b-821b-457e-b8fa-3452a66f284c",
              "parentUUID": "0c1647dd-bdfc-43e5-9fa3-714a6b12d12d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "0dd228e3-ad82-46b5-bcc9-3e96500a428b",
              "parentUUID": "0c1647dd-bdfc-43e5-9fa3-714a6b12d12d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1ea8f2fd-42c5-4ce3-87fb-9602f2f851e9",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 1620,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "bad51579-41ba-4e97-bf95-c349f919c2e8",
                  "parentUUID": "1ea8f2fd-42c5-4ce3-87fb-9602f2f851e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  beforeScreenshot: function beforeScreenshot() {},\n  afterScreenshot: function afterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "b8282727-1aeb-402c-82e0-8bc9146fc313",
                  "parentUUID": "1ea8f2fd-42c5-4ce3-87fb-9602f2f851e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bad51579-41ba-4e97-bf95-c349f919c2e8",
                "b8282727-1aeb-402c-82e0-8bc9146fc313"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1827,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "eba1bdb8-5f03-45ec-b8b5-3e983775b092",
            "2f7acca2-53d7-4bfd-a34c-d2f30e2d1ff3",
            "8a619b0b-821b-457e-b8fa-3452a66f284c",
            "0dd228e3-ad82-46b5-bcc9-3e96500a428b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2581,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.1.0"
    }
  }
}